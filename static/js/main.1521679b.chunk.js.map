{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","title","poster","genres","synopsis","className","MoviePoster","alt","map","genre","index","MovieGenres","key","src","prototype","PropTypes","string","isRequired","App","state","_getMovies","a","async","_callAPI","movies","setState","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","title_english","medium_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4VAuCA,SAASA,EAAT,GAAkD,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SACnC,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,iBACX,kBAACC,EAAD,CAAaJ,OAAUA,EAAQK,IAAKN,KAExC,yBAAKI,UAAU,iBACX,4BAAKJ,GACL,yBAAKI,UAAY,gBACZF,EAAOK,KAAI,SAACC,EAAOC,GAAR,OAAkB,kBAACC,EAAD,CAAaF,MAAOA,EAAOG,IAAKF,QAElE,uBAAGL,UAAU,kBACRD,KAarB,SAASE,EAAT,GAAqC,IAAfJ,EAAc,EAAdA,OAAQK,EAAM,EAANA,IAC1B,OACI,yBAAKM,IAAOX,EAAQK,IAAOA,EAAKF,UAAU,iBAGlD,SAASM,EAAT,GAA+B,IAATF,EAAQ,EAARA,MAClB,OACI,0BAAMJ,UAAU,eAAeI,GAbvCT,EAAMc,UAAY,CACdb,MAAQc,IAAUC,OAAOC,WACzBf,OAASa,IAAUC,OAAOC,WAC1Bd,OAASY,IAAUC,OAAOC,WAC1Bb,SAAWW,IAAUC,OAAOC,YAYhCX,EAAYQ,UAAY,CACpBZ,OAAQa,IAAUC,OAAOC,WACzBV,IAAKQ,IAAUC,OAAOC,YAE1BN,EAAYG,UAAY,CACpBL,MAAOM,IAAUC,OAAOC,YAEbjB,QC4BAkB,E,2MAhFbC,MAAQ,G,EAORC,WAAa,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACU,EAAKE,YADf,OACLC,EADK,OAEX,EAAKC,SAAS,CACZD,WAHS,sC,EASbD,SAAW,WACT,OAAOG,MAAM,6DACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKN,UACvBO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAsC9BG,cAAgB,WAUd,OATe,EAAKhB,MAAMK,OAAOhB,KAAI,SAAC4B,GAEpC,OADAH,QAAQC,IAAIE,GACL,kBAAC,EAAD,CACLnC,MAAOmC,EAAMC,cACbnC,OAAUkC,EAAME,mBAChB1B,IAAOwB,EAAMG,GACbpC,OAAUiC,EAAMjC,OAChBC,SAAYgC,EAAMhC,e,mFA9DtBoC,KAAKpB,e,+BAoEL,OADAa,QAAQC,IAAI,WAGV,yBAAK7B,UAAWmC,KAAKhB,OAAS,MAAQ,gBACnCgB,KAAKrB,MAAMK,OAASgB,KAAKL,gBAAmB,e,GAlFnCM,aCVEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.1521679b.chunk.js","sourcesContent":["//import React, { Component } from 'react';\nimport React from 'react';\nimport PropTypes from 'prop-types'\nimport \"./Movie.css\";\n/*\nclass Movie extends Component{\n\n    static propTypes = {\n        title: PropTypes.string.isRequired,\n        poster: PropTypes.string\n    } // checking correct type pf prop_types\n\n    render() {\n        // console.log(this.props)\n        return (\n            <div>\n                <MoviePoster poster={this.props.poster}/>\n                <h1>{this.props.title}</h1>\n            </div>\n        );\n    }   \n} \n\nclass MoviePoster extends Component {\n\n    static propTypes = {\n        poster : PropTypes.string.isRequired\n    }\n    \n    render() {\n        return(\n            // parent give props to siblings\n            <img src={this.props.poster}></img>\n        )\n    }\n}\n*/\n// functional components\n// no need state, no life cycle, some component just return need just one props\nfunction Movie({title, poster, genres, synopsis}){\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie_Columns\">\n                <MoviePoster poster = {poster} alt={title}/>\n            </div>\n            <div className=\"Movie_Columns\">\n                <h1>{title}</h1>\n                <div className = \"Movie_Genres\">\n                    {genres.map((genre, index) => <MovieGenres genre={genre} key={index} />)}\n                </div>\n                <p className=\"Movie_Synopsis\">\n                    {synopsis}\n                </p>\n            </div>\n        </div>\n    )\n}\n\nMovie.prototype = {\n    title : PropTypes.string.isRequired,\n    poster : PropTypes.string.isRequired,\n    genres : PropTypes.string.isRequired,\n    synopsis : PropTypes.string.isRequired\n}\nfunction MoviePoster({poster, alt}) {\n    return (\n        <img src = {poster} alt = {alt} className=\"Movie_Poster\" />\n    )\n}\nfunction MovieGenres({genre}) {\n    return (\n        <span className=\"Movie_Genre\">{genre}</span>\n    )\n}\nMoviePoster.prototype = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}\nMovieGenres.prototype = {\n    genre: PropTypes.string.isRequired\n}\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie'\n\n/*\nobject - props\n*/\n/*\nAJAX - Asynchrous Javascript And XML ++ JSON ( Javascript Object Notation )\nUsing fetch attach AJAX on React\n\npromise is new javascript concept - asynchronous programming\nsynchronous -> flow as order, wait until pre-job finished \nasynchronous -> it doesn't need finished before job\n\nfetch & promise makes you create scenario and manipulate that\n\nawait & async\n\n\n*/\n\nclass App extends Component {\n  // Render : ComponentWillMount() -> render() -> componentDIdMount()\n  // Update : ComponentReceiveProps() -> ShouldComponentUpdate() -> ComponentWillUpdate() -> render() -> componentDidMount()\n  // Whenever state is changed, Component Updates, render happens\n\n  // smart component have states\n  // dumb component don't have state all they have props\n  state = {    \n  }\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _getMovies = async() => { // it doesn't block anything .. to wait\n    const movies = await this._callAPI() // waiting ths._callAPI() finish, return values \n    this.setState({ // setState not start till await code getting finished\n      movies\n    })\n    // \n\n  }\n\n  _callAPI = () => {\n    return fetch(\"https://yts.lt/api/v2/list_movies.json?sort_by=like_count\")\n      .then(response => response.json()) // arrow function , modern javascript, means return\n      .then(json => json.data.movies)\n      .catch(err => console.log(err))\n  }\n/*\ncomponentDidMount() {\n  setTimeout(() => { // execute after certain amount of time\n    //this.state.greeting = 'Something' // Should Never Write state directly, render thing does not updated\n    this.setState({\n      movies : [\n        {\n          id : 1,\n          title: \"Matrix\",\n          poster:   \"https://upload.wikimedia.org/wikipedia/en/thumb/0/06/Ultimate_Matrix_Collection_poster.jpg/220px-Ultimate_Matrix_Collection_poster.jpg\"\n        },\n        {\n          id : 2,\n          title: \"Full Metal Jacket\",\n          poster:   \"https://images2.minutemediacdn.com/image/upload/c_crop,h_2132,w_3794,x_0,y_22/f_auto,q_auto,w_1100/v1555155644/shape/mentalfloss/full-metal-jacket-hed.jpg\",\n        \n        },\n        {\n          id : 3,\n          title: \"Old boy\",\n          poster:     \"https://i.ytimg.com/vi/N36z1-WzUvk/maxresdefault.jpg\",\n      \n        },  \n        {\n          id : 4,\n          title: \"Star Wars\",\n          poster: \"https://i.ytimg.com/vi/j2GjT5O1G2Q/maxresdefault.jpg\"\n        }\n      ]\n      \n    })\n  }, 5000) // wait 5 seconds state changes automatically\n}\n*/\n\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      console.log(movie);\n      return <Movie \n        title={movie.title_english} \n        poster = {movie.medium_cover_image} \n        key = {movie.id} \n        genres = {movie.genres}\n        synopsis = {movie.synopsis}/> \n    })\n    return movies\n  }\n  render() {\n    console.log(\"render \");\n    return (\n      // if true or false\n      <div className={this.movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() :  'loading'}\n      </div>\n    );\n  }\n}\nexport default App;\n\n// array map() -> map create new array with the elements of the other array\n// create new components using array map function\n// react need key when it have so many elements.\n// jsx needs {variables} ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}